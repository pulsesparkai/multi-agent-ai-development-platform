// Code generated by the Encore 1.50.0 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly ai: ai.ServiceClient
    public readonly auth: auth.ServiceClient
    public readonly deployment: deployment.ServiceClient
    public readonly files: files.ServiceClient
    public readonly help: help.ServiceClient
    public readonly history: history.ServiceClient
    public readonly localstorage: localstorage.ServiceClient
    public readonly multiagent: multiagent.ServiceClient
    public readonly projects: projects.ServiceClient
    public readonly security: security.ServiceClient
    public readonly templates: templates.ServiceClient
    public readonly tools: tools.ServiceClient
    public readonly versioncontrol: versioncontrol.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.ai = new ai.ServiceClient(base)
        this.auth = new auth.ServiceClient(base)
        this.deployment = new deployment.ServiceClient(base)
        this.files = new files.ServiceClient(base)
        this.help = new help.ServiceClient(base)
        this.history = new history.ServiceClient(base)
        this.localstorage = new localstorage.ServiceClient(base)
        this.multiagent = new multiagent.ServiceClient(base)
        this.projects = new projects.ServiceClient(base)
        this.security = new security.ServiceClient(base)
        this.templates = new templates.ServiceClient(base)
        this.tools = new tools.ServiceClient(base)
        this.versioncontrol = new versioncontrol.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * Import the auth handler to be able to derive the auth type
 */
import type { auth as auth_auth } from "~backend/auth/auth";

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: RequestType<typeof auth_auth> | AuthDataGenerator
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    chat as api_ai_chat_chat,
    getSession as api_ai_chat_getSession
} from "~backend/ai/chat";
import {
    listKeys as api_ai_keys_listKeys,
    setKey as api_ai_keys_setKey
} from "~backend/ai/keys";

export namespace ai {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.chat = this.chat.bind(this)
            this.getSession = this.getSession.bind(this)
            this.listKeys = this.listKeys.bind(this)
            this.setKey = this.setKey.bind(this)
        }

        /**
         * Sends a chat message to the AI
         */
        public async chat(params: RequestType<typeof api_ai_chat_chat>): Promise<ResponseType<typeof api_ai_chat_chat>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/chat`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_chat_chat>
        }

        /**
         * Gets a chat session
         */
        public async getSession(params: { projectId: string, sessionId: string }): Promise<ResponseType<typeof api_ai_chat_getSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/chat/${encodeURIComponent(params.projectId)}/${encodeURIComponent(params.sessionId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_chat_getSession>
        }

        /**
         * Lists all API key providers for the user (without exposing the keys)
         */
        public async listKeys(): Promise<ResponseType<typeof api_ai_keys_listKeys>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/keys`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_keys_listKeys>
        }

        /**
         * Sets an API key for a specific provider
         */
        public async setKey(params: RequestType<typeof api_ai_keys_setKey>): Promise<ResponseType<typeof api_ai_keys_setKey>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/keys`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_keys_setKey>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { me as api_auth_user_me } from "~backend/auth/user";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.me = this.me.bind(this)
        }

        /**
         * Get current user information
         */
        public async me(): Promise<ResponseType<typeof api_auth_user_me>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/me`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_user_me>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { deploy as api_deployment_deploy_deploy } from "~backend/deployment/deploy";
import {
    getDeploymentStatus as api_deployment_status_getDeploymentStatus,
    listDeployments as api_deployment_status_listDeployments
} from "~backend/deployment/status";

export namespace deployment {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.deploy = this.deploy.bind(this)
            this.getDeploymentStatus = this.getDeploymentStatus.bind(this)
            this.listDeployments = this.listDeployments.bind(this)
        }

        public async deploy(params: RequestType<typeof api_deployment_deploy_deploy>): Promise<ResponseType<typeof api_deployment_deploy_deploy>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deploy`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deployment_deploy_deploy>
        }

        public async getDeploymentStatus(params: { id: string }): Promise<ResponseType<typeof api_deployment_status_getDeploymentStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deployments/${encodeURIComponent(params.id)}/status`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deployment_status_getDeploymentStatus>
        }

        public async listDeployments(): Promise<ResponseType<typeof api_deployment_status_listDeployments>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deployments`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deployment_status_listDeployments>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_files_create_create } from "~backend/files/create";
import { get as api_files_get_get } from "~backend/files/get";
import { list as api_files_list_list } from "~backend/files/list";
import { update as api_files_update_update } from "~backend/files/update";

export namespace files {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new file in a project
         */
        public async create(params: RequestType<typeof api_files_create_create>): Promise<ResponseType<typeof api_files_create_create>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content:  params.content,
                language: params.language,
                name:     params.name,
                path:     params.path,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.projectId)}/files`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_files_create_create>
        }

        /**
         * Gets a specific file with its content
         */
        public async get(params: { projectId: string, fileId: string }): Promise<ResponseType<typeof api_files_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.projectId)}/files/${encodeURIComponent(params.fileId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_files_get_get>
        }

        /**
         * Lists all files in a project
         */
        public async list(params: { projectId: string }): Promise<ResponseType<typeof api_files_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.projectId)}/files`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_files_list_list>
        }

        /**
         * Updates a file's content
         */
        public async update(params: RequestType<typeof api_files_update_update>): Promise<ResponseType<typeof api_files_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content: params.content,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.projectId)}/files/${encodeURIComponent(params.fileId)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_files_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    getHelpTopic as api_help_docs_getHelpTopic,
    listCategories as api_help_docs_listCategories,
    searchHelp as api_help_docs_searchHelp
} from "~backend/help/docs";

export namespace help {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getHelpTopic = this.getHelpTopic.bind(this)
            this.listCategories = this.listCategories.bind(this)
            this.searchHelp = this.searchHelp.bind(this)
        }

        public async getHelpTopic(params: { id: string }): Promise<ResponseType<typeof api_help_docs_getHelpTopic>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/help/topics/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_help_docs_getHelpTopic>
        }

        public async listCategories(): Promise<ResponseType<typeof api_help_docs_listCategories>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/help/categories`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_help_docs_listCategories>
        }

        public async searchHelp(params: RequestType<typeof api_help_docs_searchHelp>): Promise<ResponseType<typeof api_help_docs_searchHelp>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                category: params.category,
                query:    params.query,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/help/search`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_help_docs_searchHelp>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    endSession as api_history_tracking_endSession,
    getHistory as api_history_tracking_getHistory,
    getUserAnalytics as api_history_tracking_getUserAnalytics,
    recordAction as api_history_tracking_recordAction,
    refineAction as api_history_tracking_refineAction,
    startSession as api_history_tracking_startSession,
    undoAction as api_history_tracking_undoAction
} from "~backend/history/tracking";

export namespace history {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.endSession = this.endSession.bind(this)
            this.getHistory = this.getHistory.bind(this)
            this.getUserAnalytics = this.getUserAnalytics.bind(this)
            this.recordAction = this.recordAction.bind(this)
            this.refineAction = this.refineAction.bind(this)
            this.startSession = this.startSession.bind(this)
            this.undoAction = this.undoAction.bind(this)
        }

        public async endSession(params: RequestType<typeof api_history_tracking_endSession>): Promise<ResponseType<typeof api_history_tracking_endSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/history/session/end`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_history_tracking_endSession>
        }

        public async getHistory(params: RequestType<typeof api_history_tracking_getHistory>): Promise<ResponseType<typeof api_history_tracking_getHistory>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:     params.limit === undefined ? undefined : String(params.limit),
                offset:    params.offset === undefined ? undefined : String(params.offset),
                projectId: params.projectId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/history`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_history_tracking_getHistory>
        }

        public async getUserAnalytics(params: RequestType<typeof api_history_tracking_getUserAnalytics>): Promise<ResponseType<typeof api_history_tracking_getUserAnalytics>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                optIn: params.optIn === undefined ? undefined : String(params.optIn),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/history/analytics`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_history_tracking_getUserAnalytics>
        }

        public async recordAction(params: RequestType<typeof api_history_tracking_recordAction>): Promise<ResponseType<typeof api_history_tracking_recordAction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/history/record`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_history_tracking_recordAction>
        }

        public async refineAction(params: RequestType<typeof api_history_tracking_refineAction>): Promise<ResponseType<typeof api_history_tracking_refineAction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/history/refine`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_history_tracking_refineAction>
        }

        public async startSession(): Promise<ResponseType<typeof api_history_tracking_startSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/history/session/start`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_history_tracking_startSession>
        }

        public async undoAction(params: RequestType<typeof api_history_tracking_undoAction>): Promise<ResponseType<typeof api_history_tracking_undoAction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/history/undo`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_history_tracking_undoAction>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    configureLocalLLM as api_localstorage_offline_configureLocalLLM,
    enableOfflineMode as api_localstorage_offline_enableOfflineMode,
    getLocalProjects as api_localstorage_offline_getLocalProjects,
    getOfflineCapabilities as api_localstorage_offline_getOfflineCapabilities,
    syncWithServer as api_localstorage_offline_syncWithServer
} from "~backend/localstorage/offline";

export namespace localstorage {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.configureLocalLLM = this.configureLocalLLM.bind(this)
            this.enableOfflineMode = this.enableOfflineMode.bind(this)
            this.getLocalProjects = this.getLocalProjects.bind(this)
            this.getOfflineCapabilities = this.getOfflineCapabilities.bind(this)
            this.syncWithServer = this.syncWithServer.bind(this)
        }

        public async configureLocalLLM(params: RequestType<typeof api_localstorage_offline_configureLocalLLM>): Promise<ResponseType<typeof api_localstorage_offline_configureLocalLLM>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/offline/llm`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_localstorage_offline_configureLocalLLM>
        }

        public async enableOfflineMode(params: { projectId: string }): Promise<ResponseType<typeof api_localstorage_offline_enableOfflineMode>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/offline/enable/${encodeURIComponent(params.projectId)}`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_localstorage_offline_enableOfflineMode>
        }

        public async getLocalProjects(): Promise<ResponseType<typeof api_localstorage_offline_getLocalProjects>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/offline/projects`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_localstorage_offline_getLocalProjects>
        }

        public async getOfflineCapabilities(): Promise<ResponseType<typeof api_localstorage_offline_getOfflineCapabilities>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/offline/capabilities`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_localstorage_offline_getOfflineCapabilities>
        }

        public async syncWithServer(params: RequestType<typeof api_localstorage_offline_syncWithServer>): Promise<ResponseType<typeof api_localstorage_offline_syncWithServer>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/offline/sync`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_localstorage_offline_syncWithServer>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createAgent as api_multiagent_agents_createAgent,
    deleteAgent as api_multiagent_agents_deleteAgent,
    toggleAgent as api_multiagent_agents_toggleAgent,
    updateAgent as api_multiagent_agents_updateAgent
} from "~backend/multiagent/agents";
import {
    getBudget as api_multiagent_budget_getBudget,
    getBudgetOverview as api_multiagent_budget_getBudgetOverview,
    getBudgetUsage as api_multiagent_budget_getBudgetUsage,
    resetBudgetUsage as api_multiagent_budget_resetBudgetUsage,
    updateBudget as api_multiagent_budget_updateBudget
} from "~backend/multiagent/budget";
import {
    controlSession as api_multiagent_execution_controlSession,
    getSession as api_multiagent_execution_getSession,
    listSessions as api_multiagent_execution_listSessions,
    startSession as api_multiagent_execution_startSession
} from "~backend/multiagent/execution";
import {
    fallbackToSingleAgent as api_multiagent_fallback_fallbackToSingleAgent,
    getSessionWithFallback as api_multiagent_fallback_getSessionWithFallback
} from "~backend/multiagent/fallback";
import {
    createTeam as api_multiagent_teams_createTeam,
    getTeam as api_multiagent_teams_getTeam,
    listTeams as api_multiagent_teams_listTeams,
    toggleTeam as api_multiagent_teams_toggleTeam
} from "~backend/multiagent/teams";

export namespace multiagent {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.controlSession = this.controlSession.bind(this)
            this.createAgent = this.createAgent.bind(this)
            this.createTeam = this.createTeam.bind(this)
            this.deleteAgent = this.deleteAgent.bind(this)
            this.fallbackToSingleAgent = this.fallbackToSingleAgent.bind(this)
            this.getBudget = this.getBudget.bind(this)
            this.getBudgetOverview = this.getBudgetOverview.bind(this)
            this.getBudgetUsage = this.getBudgetUsage.bind(this)
            this.getSession = this.getSession.bind(this)
            this.getSessionWithFallback = this.getSessionWithFallback.bind(this)
            this.getTeam = this.getTeam.bind(this)
            this.listSessions = this.listSessions.bind(this)
            this.listTeams = this.listTeams.bind(this)
            this.resetBudgetUsage = this.resetBudgetUsage.bind(this)
            this.startSession = this.startSession.bind(this)
            this.toggleAgent = this.toggleAgent.bind(this)
            this.toggleTeam = this.toggleTeam.bind(this)
            this.updateAgent = this.updateAgent.bind(this)
            this.updateBudget = this.updateBudget.bind(this)
        }

        /**
         * Pauses or resumes a session
         */
        public async controlSession(params: RequestType<typeof api_multiagent_execution_controlSession>): Promise<ResponseType<typeof api_multiagent_execution_controlSession>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                action: params.action,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/sessions/${encodeURIComponent(params.sessionId)}/control`, {method: "PATCH", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_execution_controlSession>
        }

        /**
         * Creates a new agent in a team
         */
        public async createAgent(params: RequestType<typeof api_multiagent_agents_createAgent>): Promise<ResponseType<typeof api_multiagent_agents_createAgent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/agents`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_agents_createAgent>
        }

        /**
         * Creates a new agent team
         */
        public async createTeam(params: RequestType<typeof api_multiagent_teams_createTeam>): Promise<ResponseType<typeof api_multiagent_teams_createTeam>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/teams`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_teams_createTeam>
        }

        /**
         * Deletes an agent
         */
        public async deleteAgent(params: { agentId: string }): Promise<ResponseType<typeof api_multiagent_agents_deleteAgent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/agents/${encodeURIComponent(params.agentId)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_agents_deleteAgent>
        }

        /**
         * Fallback to single-agent mode when multi-agent fails
         */
        public async fallbackToSingleAgent(params: RequestType<typeof api_multiagent_fallback_fallbackToSingleAgent>): Promise<ResponseType<typeof api_multiagent_fallback_fallbackToSingleAgent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/fallback`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_fallback_fallbackToSingleAgent>
        }

        /**
         * Gets budget information for a team
         */
        public async getBudget(params: { teamId: string }): Promise<ResponseType<typeof api_multiagent_budget_getBudget>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/budget/${encodeURIComponent(params.teamId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_budget_getBudget>
        }

        /**
         * Gets budget overview for all teams of a user
         */
        public async getBudgetOverview(): Promise<ResponseType<typeof api_multiagent_budget_getBudgetOverview>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/budget`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_budget_getBudgetOverview>
        }

        /**
         * Gets budget usage history for a team
         */
        public async getBudgetUsage(params: RequestType<typeof api_multiagent_budget_getBudgetUsage>): Promise<ResponseType<typeof api_multiagent_budget_getBudgetUsage>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: params.limit === undefined ? undefined : String(params.limit),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/budget/${encodeURIComponent(params.teamId)}/usage`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_budget_getBudgetUsage>
        }

        /**
         * Gets session status and messages
         */
        public async getSession(params: { sessionId: string }): Promise<ResponseType<typeof api_multiagent_execution_getSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/sessions/${encodeURIComponent(params.sessionId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_execution_getSession>
        }

        /**
         * Get session status including fallback information
         */
        public async getSessionWithFallback(params: { sessionId: string }): Promise<ResponseType<typeof api_multiagent_fallback_getSessionWithFallback>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/fallback/${encodeURIComponent(params.sessionId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_fallback_getSessionWithFallback>
        }

        /**
         * Gets a specific team with its agents
         */
        public async getTeam(params: { teamId: string }): Promise<ResponseType<typeof api_multiagent_teams_getTeam>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/teams/${encodeURIComponent(params.teamId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_teams_getTeam>
        }

        /**
         * Lists all sessions for a team or project
         */
        public async listSessions(params: RequestType<typeof api_multiagent_execution_listSessions>): Promise<ResponseType<typeof api_multiagent_execution_listSessions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                projectId: params.projectId,
                teamId:    params.teamId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/sessions`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_execution_listSessions>
        }

        /**
         * Gets all teams for a user
         */
        public async listTeams(params: RequestType<typeof api_multiagent_teams_listTeams>): Promise<ResponseType<typeof api_multiagent_teams_listTeams>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                projectId: params.projectId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/teams`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_teams_listTeams>
        }

        /**
         * Resets budget usage for a team (admin function)
         */
        public async resetBudgetUsage(params: { teamId: string }): Promise<ResponseType<typeof api_multiagent_budget_resetBudgetUsage>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/budget/${encodeURIComponent(params.teamId)}/reset`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_budget_resetBudgetUsage>
        }

        /**
         * Starts a multi-agent session
         */
        public async startSession(params: RequestType<typeof api_multiagent_execution_startSession>): Promise<ResponseType<typeof api_multiagent_execution_startSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/sessions`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_execution_startSession>
        }

        /**
         * Toggles agent enabled/disabled
         */
        public async toggleAgent(params: RequestType<typeof api_multiagent_agents_toggleAgent>): Promise<ResponseType<typeof api_multiagent_agents_toggleAgent>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                enabled: params.enabled,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/agents/${encodeURIComponent(params.agentId)}/toggle`, {method: "PATCH", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_agents_toggleAgent>
        }

        /**
         * Activates/deactivates a team
         */
        public async toggleTeam(params: RequestType<typeof api_multiagent_teams_toggleTeam>): Promise<ResponseType<typeof api_multiagent_teams_toggleTeam>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                active: params.active,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/teams/${encodeURIComponent(params.teamId)}/toggle`, {method: "PATCH", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_teams_toggleTeam>
        }

        /**
         * Updates an agent
         */
        public async updateAgent(params: RequestType<typeof api_multiagent_agents_updateAgent>): Promise<ResponseType<typeof api_multiagent_agents_updateAgent>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                executionOrder: params.executionOrder,
                model:          params.model,
                name:           params.name,
                provider:       params.provider,
                role:           params.role,
                systemPrompt:   params.systemPrompt,
                teamId:         params.teamId,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/agents/${encodeURIComponent(params.agentId)}`, {method: "PATCH", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_agents_updateAgent>
        }

        /**
         * Updates budget limit for a team
         */
        public async updateBudget(params: RequestType<typeof api_multiagent_budget_updateBudget>): Promise<ResponseType<typeof api_multiagent_budget_updateBudget>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/multiagent/budget`, {method: "PATCH", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_multiagent_budget_updateBudget>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_projects_create_create } from "~backend/projects/create";
import { get as api_projects_get_get } from "~backend/projects/get";
import { list as api_projects_list_list } from "~backend/projects/list";

export namespace projects {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
        }

        /**
         * Creates a new project
         */
        public async create(params: RequestType<typeof api_projects_create_create>): Promise<ResponseType<typeof api_projects_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_projects_create_create>
        }

        /**
         * Gets a specific project by ID
         */
        public async get(params: { id: string }): Promise<ResponseType<typeof api_projects_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_projects_get_get>
        }

        /**
         * Lists all projects for the authenticated user
         */
        public async list(): Promise<ResponseType<typeof api_projects_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_projects_list_list>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    deleteSecureData as api_security_encryption_deleteSecureData,
    retrieveSecureData as api_security_encryption_retrieveSecureData,
    storeSecureData as api_security_encryption_storeSecureData
} from "~backend/security/encryption";
import {
    checkBudget as api_security_ratelimit_checkBudget,
    checkRateLimit as api_security_ratelimit_checkRateLimit,
    getBudgetStatus as api_security_ratelimit_getBudgetStatus,
    setBudgetLimit as api_security_ratelimit_setBudgetLimit
} from "~backend/security/ratelimit";

export namespace security {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.checkBudget = this.checkBudget.bind(this)
            this.checkRateLimit = this.checkRateLimit.bind(this)
            this.deleteSecureData = this.deleteSecureData.bind(this)
            this.getBudgetStatus = this.getBudgetStatus.bind(this)
            this.retrieveSecureData = this.retrieveSecureData.bind(this)
            this.setBudgetLimit = this.setBudgetLimit.bind(this)
            this.storeSecureData = this.storeSecureData.bind(this)
        }

        public async checkBudget(params: RequestType<typeof api_security_ratelimit_checkBudget>): Promise<ResponseType<typeof api_security_ratelimit_checkBudget>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/security/budget/check`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_security_ratelimit_checkBudget>
        }

        public async checkRateLimit(params: RequestType<typeof api_security_ratelimit_checkRateLimit>): Promise<ResponseType<typeof api_security_ratelimit_checkRateLimit>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/security/ratelimit/check`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_security_ratelimit_checkRateLimit>
        }

        public async deleteSecureData(params: { keyName: string }): Promise<ResponseType<typeof api_security_encryption_deleteSecureData>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/security/delete/${encodeURIComponent(params.keyName)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_security_encryption_deleteSecureData>
        }

        public async getBudgetStatus(): Promise<ResponseType<typeof api_security_ratelimit_getBudgetStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/security/budget/status`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_security_ratelimit_getBudgetStatus>
        }

        public async retrieveSecureData(params: { keyName: string }): Promise<ResponseType<typeof api_security_encryption_retrieveSecureData>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/security/retrieve/${encodeURIComponent(params.keyName)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_security_encryption_retrieveSecureData>
        }

        public async setBudgetLimit(params: RequestType<typeof api_security_ratelimit_setBudgetLimit>): Promise<ResponseType<typeof api_security_ratelimit_setBudgetLimit>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/security/budget/set`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_security_ratelimit_setBudgetLimit>
        }

        public async storeSecureData(params: RequestType<typeof api_security_encryption_storeSecureData>): Promise<ResponseType<typeof api_security_encryption_storeSecureData>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/security/store`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_security_encryption_storeSecureData>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { generateProject as api_templates_generate_generateProject } from "~backend/templates/generate";

export namespace templates {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.generateProject = this.generateProject.bind(this)
        }

        public async generateProject(params: RequestType<typeof api_templates_generate_generateProject>): Promise<ResponseType<typeof api_templates_generate_generateProject>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/templates/generate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_templates_generate_generateProject>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    executeTool as api_tools_registry_executeTool,
    listTools as api_tools_registry_listTools
} from "~backend/tools/registry";

export namespace tools {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.executeTool = this.executeTool.bind(this)
            this.listTools = this.listTools.bind(this)
        }

        public async executeTool(params: RequestType<typeof api_tools_registry_executeTool>): Promise<ResponseType<typeof api_tools_registry_executeTool>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tools/execute`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tools_registry_executeTool>
        }

        public async listTools(): Promise<ResponseType<typeof api_tools_registry_listTools>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tools`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tools_registry_listTools>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    commitChanges as api_versioncontrol_github_commitChanges,
    createBranch as api_versioncontrol_github_createBranch,
    createRepository as api_versioncontrol_github_createRepository,
    importRepository as api_versioncontrol_github_importRepository,
    listRepositories as api_versioncontrol_github_listRepositories
} from "~backend/versioncontrol/github";

export namespace versioncontrol {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.commitChanges = this.commitChanges.bind(this)
            this.createBranch = this.createBranch.bind(this)
            this.createRepository = this.createRepository.bind(this)
            this.importRepository = this.importRepository.bind(this)
            this.listRepositories = this.listRepositories.bind(this)
        }

        public async commitChanges(params: RequestType<typeof api_versioncontrol_github_commitChanges>): Promise<ResponseType<typeof api_versioncontrol_github_commitChanges>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/github/commit`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_versioncontrol_github_commitChanges>
        }

        public async createBranch(params: RequestType<typeof api_versioncontrol_github_createBranch>): Promise<ResponseType<typeof api_versioncontrol_github_createBranch>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/github/branches`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_versioncontrol_github_createBranch>
        }

        public async createRepository(params: RequestType<typeof api_versioncontrol_github_createRepository>): Promise<ResponseType<typeof api_versioncontrol_github_createRepository>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/github/repositories`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_versioncontrol_github_createRepository>
        }

        public async importRepository(params: RequestType<typeof api_versioncontrol_github_importRepository>): Promise<ResponseType<typeof api_versioncontrol_github_importRepository>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/github/import`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_versioncontrol_github_importRepository>
        }

        public async listRepositories(params: RequestType<typeof api_versioncontrol_github_listRepositories>): Promise<ResponseType<typeof api_versioncontrol_github_listRepositories>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                accessToken: params.accessToken,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/github/repositories`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_versioncontrol_github_listRepositories>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | RequestType<typeof auth_auth>
  | Promise<RequestType<typeof auth_auth> | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.0)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: RequestType<typeof auth_auth> | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                authorization: authData.authorization,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
